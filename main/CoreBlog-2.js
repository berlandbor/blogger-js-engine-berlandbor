// CoreBlog.js —Å Lazy Loading –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º

document.addEventListener("DOMContentLoaded", async () => { const postsListFile = "posts/list.txt"; let currentPage = 0; let allPosts = [];

const blogContainer = document.getElementById("blog");
const tocContainer = document.getElementById("toc");
const prevButton = document.getElementById("prevPage");
const nextButton = document.getElementById("nextPage");
const pageNumber = document.getElementById("pageNumber");
const searchInput = document.getElementById("searchInput");

// –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è URL
function transliterate(text) {
    const ruToEn = {
        "–∞": "a", "–±": "b", "–≤": "v", "–≥": "g", "–¥": "d", "–µ": "e", "—ë": "yo", "–∂": "zh",
        "–∑": "z", "–∏": "i", "–π": "y", "–∫": "k", "–ª": "l", "–º": "m", "–Ω": "n", "–æ": "o",
        "–ø": "p", "—Ä": "r", "—Å": "s", "—Ç": "t", "—É": "u", "—Ñ": "f", "—Ö": "h", "—Ü": "ts",
        "—á": "ch", "—à": "sh", "—â": "sch", "—ä": "", "—ã": "y", "—å": "", "—ç": "e", "—é": "yu", "—è": "ya"
    };
    return text.toLowerCase()
        .replace(/[–∞-—è—ë]/g, char => ruToEn[char] || char)
        .replace(/[^a-z0-9-]/g, "-")
        .replace(/-+/g, "-")
        .trim("-");
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
async function loadPostList() {
    try {
        const response = await fetch(postsListFile);
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π");

        const text = await response.text();
        const postFiles = text.split("\n").map(line => line.trim()).filter(line => line !== "");

        allPosts = postFiles.map(file => ({ file, title: "", date: "", content: null }));

        await loadPostHeaders(postFiles);
        generateTOC();

        const params = new URLSearchParams(window.location.search);
        const articleIndex = params.has("article") ? parseInt(params.get("article")) : 0;
        loadPostContent(articleIndex);
    } catch (error) {
        console.error(error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –¥–∞—Ç
async function loadPostHeaders(postFiles) {
    for (let i = 0; i < postFiles.length; i++) {
        try {
            const response = await fetch(postFiles[i]);
            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${postFiles[i]}`);

            const text = await response.text();
            const lines = text.split("\n");
            allPosts[i].title = lines[0].trim();
            allPosts[i].date = lines[1].trim();
        } catch (error) {
            console.error(error);
        }
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è
function generateTOC() {
    tocContainer.innerHTML = "<ul>";
    allPosts.forEach((post, index) => {
        const postSlug = transliterate(post.title);
        tocContainer.innerHTML += `<li><a href="#" data-index="${index}" class="load-post">${post.title}</a> <small>${post.date}</small></li>`;
    });
    tocContainer.innerHTML += "</ul>";

    document.querySelectorAll(".load-post").forEach(link => {
        link.addEventListener("click", (e) => {
            e.preventDefault();
            const postIndex = e.target.getAttribute("data-index");
            loadPostContent(postIndex);
        });
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç–∞—Ç—å–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function loadPostContent(index) {
    const post = allPosts[index];

    const cachedPost = localStorage.getItem(post.file);
    if (cachedPost) {
        const cachedData = JSON.parse(cachedPost);
        post.title = cachedData.title;
        post.date = cachedData.date;
        post.content = cachedData.content;
        displayPost(post);
        return;
    }

    try {
        const response = await fetch(post.file);
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${post.file}`);

        const text = await response.text();
        const lines = text.split("\n");
        post.title = lines[0].trim();
        post.date = lines[1].trim();
        post.content = lines.slice(2).join("\n");

        localStorage.setItem(post.file, JSON.stringify(post));

        displayPost(post);
    } catch (error) {
        console.error(error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
function displayPost(post) {
    blogContainer.innerHTML = "";

    const article = document.createElement("div");
    article.classList.add("post");
    article.innerHTML = `
        <h2>${post.title}</h2>
        <p><small>${post.date}</small></p>
        <div>${linkify(post.content)}</div>
        <p>
            <button class="copy-link" data-link="${post.file}">üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É</button>
            <button class="speak-text" data-text="${post.content}">üîä –û–∑–≤—É—á–∏—Ç—å</button>
        </p>
        <hr>
    `;

    blogContainer.appendChild(article);
    scrollToTop();
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö
function scrollToTop() {
    window.scrollTo({ top: 0, behavior: "smooth" });
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
prevButton.addEventListener("click", () => {
    if (currentPage > 0) {
        currentPage--;
        loadPostContent(currentPage);
    }
});

nextButton.addEventListener("click", () => {
    if (currentPage < allPosts.length - 1) {
        currentPage++;
        loadPostContent(currentPage);
    }
});

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
document.getElementById("clearCache").addEventListener("click", () => {
    localStorage.clear();
    alert("–ö—ç—à –æ—á–∏—â–µ–Ω!");
});

// –ó–∞–ø—É—Å–∫
await loadPostList();

});

